import os
import logging
import asyncio
import nest_asyncio
from aiohttp import web

from telegram import (
    Update,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(credentials)
sheet = client.open("One More Bot").sheet1

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    GREETING,
    CHOOSE_ROLE,
    GET_NAME,
    GET_CONTACT,
    GET_POSITION,
    GET_DETAILS
) = range(6)

# –ö–Ω–æ–ø–∫–∏

def base_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üåê –ù–∞ —Å–∞–π—Ç", url="https://onemorepro.com")],
        [InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    consent_caption = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ One More Production!\n\n"
        "–ú—ã –∏–≥—Ä–∞–µ–º –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º, –ø–æ—ç—Ç–æ–º—É –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –≤–∞—Å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ —Å –Ω–∞—à–µ–π <a href='https://onemorepro.com/docs/privacy.pdf'>"
        "–ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a> –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
    )
    keyboard = [[InlineKeyboardButton("–°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree")]]
    full_keyboard = InlineKeyboardMarkup(keyboard + list(base_keyboard().inline_keyboard))
    if update.message:
        await update.message.reply_photo(
            photo="https://onemorepro.com/images/4.jpg",
            caption=consent_caption,
            parse_mode='HTML',
            reply_markup=full_keyboard
        )
    elif update.callback_query:
        await update.callback_query.message.reply_photo(
            photo="https://onemorepro.com/images/4.jpg",
            caption=consent_caption,
            parse_mode='HTML',
            reply_markup=full_keyboard
        )
    return GREETING

async def greeting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("–ö–ª–∏–µ–Ω—Ç", callback_data="client")],
        [InlineKeyboardButton("–°–æ–∏—Å–∫–∞—Ç–µ–ª—å", callback_data="applicant")],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="other")]
    ]
    full_keyboard = InlineKeyboardMarkup(keyboard + base_keyboard().inline_keyboard)
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ One More Production!\n\n"
        "–ú—ã —Å–æ–∑–¥–∞—ë–º —Ä–µ–∫–ª–∞–º—É, –∫–ª–∏–ø—ã, –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∫–∏–Ω–æ –∏ digital-–∫–æ–Ω—Ç–µ–Ω—Ç.\n"
        "–° –Ω–∞–º–∏ –ø—Ä–æ—Å—Ç–æ –∏ —Ç–æ—á–Ω–æ –∑–∞—Ö–æ—á–µ—Ç—Å—è one more.\n\n"
        "üîª –í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:"
    )
    await query.message.reply_photo(
        photo="https://onemorepro.com/images/11-1.jpg",
        caption=welcome_text,
        parse_mode='HTML',
        reply_markup=full_keyboard
    )
    return CHOOSE_ROLE

async def choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    raw_role = query.data
    role_map = {"client": "–∫–ª–∏–µ–Ω—Ç", "applicant": "—Å–æ–∏—Å–∫–∞—Ç–µ–ª—å", "other": "–¥—Ä—É–≥–æ–µ"}
    role = role_map.get(raw_role, raw_role)
    context.user_data["role"] = raw_role
    context.user_data["row"] = [role, "", "", "", ""]
    name_prompt = """–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ"""
    await query.message.reply_photo(
        photo="https://onemorepro.com/images/12.jpg",
        caption=name_prompt,
        reply_markup=base_keyboard()
    )
    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text.strip()
    if not name or len(name) > 100:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤).", reply_markup=base_keyboard())
        return GET_NAME
    context.user_data["name"] = name
    if "row" not in context.user_data:
        context.user_data["row"] = ["", name, "", "", ""]
    context.user_data["row"][1] = name
    contact_prompt = "–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω, email –∏–ª–∏ –Ω–∏–∫ –≤ Telegram)."
    await update.message.reply_photo(
        photo="https://onemorepro.com/images/13-1.jpg",
        caption=contact_prompt,
        reply_markup=base_keyboard()
    )
    return GET_CONTACT

async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    contact = update.message.text.strip()
    context.user_data["contact"] = contact
    context.user_data["row"][2] = contact
    role = context.user_data.get("role")
    if role in ["applicant", "other"]:
        await update.message.reply_photo(
            photo="https://onemorepro.com/images/3.jpg",
            caption="–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ä–æ–ª—å –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ?",
            reply_markup=base_keyboard()
        )
    elif role == "client":
        keyboard = [
            [InlineKeyboardButton("–†–µ–∫–ª–∞–º–∞", callback_data="ad")],
            [InlineKeyboardButton("–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∫–∏–Ω–æ", callback_data="doc")],
            [InlineKeyboardButton("–ö–ª–∏–ø", callback_data="clip")],
            [InlineKeyboardButton("Digital-–∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="digital")],
            [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="other")]
        ]
        await update.message.reply_photo(
            photo="https://onemorepro.com/images/3.jpg",
            caption="–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=InlineKeyboardMarkup(keyboard + base_keyboard().inline_keyboard)
        )
    else:
        return GET_DETAILS
    return GET_POSITION

async def get_position(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.callback_query:
        await update.callback_query.answer()
        position = update.callback_query.data
        await update.callback_query.message.reply_photo(
            photo="https://onemorepro.com/images/6.jpg",
            caption="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ:",
            reply_markup=base_keyboard()
        )
    else:
        position = update.message.text
        await update.message.reply_photo(
            photo="https://onemorepro.com/images/6.jpg",
            caption="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ:",
            reply_markup=base_keyboard()
        )
    context.user_data["position"] = position
    context.user_data["row"][3] = position
    return GET_DETAILS

async def get_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    details = update.message.text.strip()
    if len(details) > 1000:
        await update.message.reply_text("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤.", reply_markup=base_keyboard())
        return GET_DETAILS
    context.user_data["details"] = details
    context.user_data["row"][4] = details
    try:
        sheet.append_row(context.user_data["row"])
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=base_keyboard())
        return ConversationHandler.END
    thank_you_text = """–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.\n\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"""
    await update.message.reply_photo(
        photo="https://onemorepro.com/images/8.jpg",
        caption=thank_you_text,
        reply_markup=base_keyboard()
    )
    return ConversationHandler.END

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        if "row" in context.user_data:
            all_records = sheet.get_all_values()
            if context.user_data["row"] in all_records:
                index = all_records.index(context.user_data["row"]) + 1
                sheet.delete_row(index)
    except Exception:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ")
    context.user_data.clear()
    if update.callback_query:
        await update.callback_query.answer()
    return await start(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def healthz(request):
    return web.Response(text="ok")

async def webhook_handler(request):
    update = await request.json()
    await request.app["application"].process_update(Update.de_json(update, request.app["application"].bot))
    return web.Response()

async def main():
    app = Application.builder().token(os.environ["BOT_TOKEN"]).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GREETING: [CallbackQueryHandler(greeting, pattern="^agree$"), CallbackQueryHandler(restart, pattern="^restart$")],
            CHOOSE_ROLE: [CallbackQueryHandler(choose_role), CallbackQueryHandler(restart, pattern="^restart$")],
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name), CallbackQueryHandler(restart, pattern="^restart$")],
            GET_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact), CallbackQueryHandler(restart, pattern="^restart$")],
            GET_POSITION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_position),
                CallbackQueryHandler(get_position),
                CallbackQueryHandler(restart, pattern="^restart$")
            ],
            GET_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_details), CallbackQueryHandler(restart, pattern="^restart$")],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CallbackQueryHandler(restart, pattern="^restart$")
        ],
        per_chat=True,
        per_message=False,
    )

    app.add_handler(conv_handler)

    await app.initialize()
    await app.bot.delete_webhook(drop_pending_updates=True)
    await app.bot.set_webhook(url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/webhook")

    web_app = web.Application()
    web_app["application"] = app
    web_app.add_routes([
        web.post("/webhook", webhook_handler),
        web.get("/healthz", healthz),
    ])

    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.environ.get("PORT", 8443)))
    await site.start()

    await app.start()
    logger.info("Bot is running...")
    await asyncio.Event().wait()  # run forever

nest_asyncio.apply()

if __name__ == "__main__":
    asyncio.run(main())
