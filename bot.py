import logging
import os
import nest_asyncio
import asyncio

from telegram import ReplyKeyboardMarkup, KeyboardButton, Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –°–æ—Å—Ç–æ—è–Ω–∏—è
ASK_ROLE, ASK_NAME, ASK_CONTACT, ASK_INFO = range(4)

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(credentials)
sheet = client.open("One More Bot").sheet1

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [KeyboardButton("–ö–ª–∏–µ–Ω—Ç"), KeyboardButton("–°–æ–∏—Å–∫–∞—Ç–µ–ª—å")],
    ]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ One More Production!\n"
        "–ú—ã —Å–æ–∑–¥–∞—ë–º —Ä–µ–∫–ª–∞–º—É, –∫–ª–∏–ø—ã, –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∫–∏–Ω–æ –∏ –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–π digital-–∫–æ–Ω—Ç–µ–Ω—Ç.\n\n"
        "–° –Ω–∞–º–∏ –ø—Ä–æ—Å—Ç–æ. –ò —Ç–æ—á–Ω–æ –∑–∞—Ö–æ—á–µ—Ç—Å—è one more.\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç):",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True),
    )
    return ASK_ROLE

# –û—Ç–≤–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä —Ä–æ–ª–∏
async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["role"] = update.message.text
    await update.message.reply_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    return ASK_NAME

async def ask_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω, email, Telegram –∏ —Ç.–ø.):")
    return ASK_CONTACT

async def ask_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["contact"] = update.message.text
    role = context.user_data["role"].lower()

    if role == "–∫–ª–∏–µ–Ω—Ç":
        keyboard = [
            ["–†–µ–∫–ª–∞–º–∞", "–ö–ª–∏–ø"],
            ["–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç", "–î—Ä—É–≥–æ–µ"]
        ]
        await update.message.reply_text(
            "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True),
        )
    else:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ –∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å.")
    return ASK_INFO

async def save_and_thank(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    role = context.user_data.get("role", "")
    name = context.user_data.get("name", "")
    contact = context.user_data.get("contact", "")
    info = update.message.text

    sheet.append_row([role, name, contact, info])

    keyboard = [
        [InlineKeyboardButton("üåê –ù–∞ —Å–∞–π—Ç", url="https://onemorepro.com")],
        [KeyboardButton("üîÅ –í –Ω–∞—á–∞–ª–æ")]
    ]

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return ConversationHandler.END

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await start(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    token = os.getenv("BOT_TOKEN")
    logger.info("BOT_TOKEN detected: %s", token[:10] + "..." if token else "None")
    app = Application.builder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_contact)],
            ASK_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_info)],
            ASK_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_and_thank)],
        },
        fallbacks=[
            CommandHandler("start", restart),
            MessageHandler(filters.Regex("^(üîÅ –í –Ω–∞—á–∞–ª–æ)$"), restart),
            CommandHandler("cancel", cancel),
        ],
    )

    app.add_handler(conv_handler)

    await app.bot.delete_webhook(drop_pending_updates=True)
    await app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8443)),
        webhook_url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/"
    )

nest_asyncio.apply()
if __name__ == "__main__":
    asyncio.run(main())
