import logging
import os
import nest_asyncio
import asyncio

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
ASK_NAME, ASK_CONTACT, ASK_ABOUT = range(3)

# –ö–Ω–æ–ø–∫–∏ –≤–µ–∑–¥–µ
inline_markup = InlineKeyboardMarkup([
    [InlineKeyboardButton("üåê –ù–∞ —Å–∞–π—Ç", url="https://onemorepro.com")],
    [InlineKeyboardButton("üîÑ –í –Ω–∞—á–∞–ª–æ", callback_data="start_over")]
])

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(credentials)
sheet = client.open("One More Bot").sheet1

# –ö–æ–º–∞–Ω–¥–∞ /start –∏ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_keyboard = [["–ö–ª–∏–µ–Ω—Ç", "–°–æ–∏—Å–∫–∞—Ç–µ–ª—å"]]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ One More Production!\n"
        "–ú—ã —Å–æ–∑–¥–∞—ë–º —Ä–µ–∫–ª–∞–º—É, –∫–ª–∏–ø—ã, –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∫–∏–Ω–æ –∏ digital-–∫–æ–Ω—Ç–µ–Ω—Ç.\n\n"
        "–° –Ω–∞–º–∏ –ø—Ä–æ—Å—Ç–æ. –ò —Ç–æ—á–Ω–æ –∑–∞—Ö–æ—á–µ—Ç—Å—è one more.\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç):",
        reply_markup=inline_markup
    )
    return ASK_NAME

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["role"] = update.message.text
    await update.message.reply_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=inline_markup)
    return ASK_CONTACT

async def ask_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è? (email, —Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–∏–∫–Ω–µ–π–º)", reply_markup=inline_markup)
    return ASK_ABOUT

async def ask_about(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["contact"] = update.message.text
    await update.message.reply_text("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏ —Å–≤–æ—ë–º –∑–∞–ø—Ä–æ—Å–µ:", reply_markup=inline_markup)
    return ConversationHandler.END

async def save_and_thank(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["about"] = update.message.text
    sheet.append_row([
        context.user_data.get("role", ""),
        context.user_data.get("name", ""),
        context.user_data.get("contact", ""),
        context.user_data.get("about", "")
    ])
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.\n\n–ù–∞–∂–º–∏—Ç–µ \"–í –Ω–∞—á–∞–ª–æ\" –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç:",
        reply_markup=inline_markup
    )
    return ConversationHandler.END

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.message.delete()
    return await start(query, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=inline_markup)
    return ConversationHandler.END

async def main():
    token = os.environ["BOT_TOKEN"]
    app = Application.builder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_contact)],
            ASK_ABOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_about)],
        },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.TEXT, save_and_thank)],
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(restart, pattern="^start_over$"))

    await app.bot.delete_webhook(drop_pending_updates=True)
    await app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8443)),
        webhook_url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/"
    )

nest_asyncio.apply()
if __name__ == "__main__":
    asyncio.run(main())
