import logging
import os
import nest_asyncio
import asyncio

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
ASK_ROLE, ASK_NAME, ASK_CONTACT, ASK_ABOUT = range(4)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Google Sheets setup
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(credentials)
sheet = client.open("One More Bot").sheet1

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Å—Å—ã–ª–∫–æ–π –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
def base_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üåê –ù–∞ —Å–∞–π—Ç", url="https://onemorepro.com")],
        [InlineKeyboardButton("üîÅ –í –Ω–∞—á–∞–ª–æ", callback_data="restart")]
    ])

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ö–ª–∏–µ–Ω—Ç", "–°–æ–∏—Å–∫–∞—Ç–µ–ª—å"]]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ One More Production!\n"
        "–ú—ã —Å–æ–∑–¥–∞—ë–º —Ä–µ–∫–ª–∞–º—É, –∫–ª–∏–ø—ã, –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∫–∏–Ω–æ –∏ –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–π digital-–∫–æ–Ω—Ç–µ–Ω—Ç.\n\n"
        "–° –Ω–∞–º–∏ –ø—Ä–æ—Å—Ç–æ. –ò —Ç–æ—á–Ω–æ –∑–∞—Ö–æ—á–µ—Ç—Å—è one more.\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç):",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return ASK_ROLE

# –†–æ–ª—å: –ö–ª–∏–µ–Ω—Ç / –°–æ–∏—Å–∫–∞—Ç–µ–ª—å / –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["role"] = update.message.text
    await update.message.reply_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=base_keyboard())
    return ASK_NAME

async def ask_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram):", reply_markup=base_keyboard())
    return ASK_CONTACT

async def ask_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact"] = update.message.text
    role = context.user_data.get("role", "").lower()
    if role == "–∫–ª–∏–µ–Ω—Ç":
        sheet.append_row([context.user_data["role"], context.user_data["name"], context.user_data["contact"], ""])
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.", reply_markup=base_keyboard())
        return ConversationHandler.END
    else:
        await update.message.reply_text("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏ —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ:", reply_markup=base_keyboard())
        return ASK_ABOUT

async def save_and_thank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["about"] = update.message.text
    sheet.append_row([
        context.user_data["role"],
        context.user_data["name"],
        context.user_data["contact"],
        context.user_data["about"]
    ])
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú—ã –∏–∑—É—á–∏–º –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–≤—è–∂–µ–º—Å—è –ø—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.", reply_markup=base_keyboard())
    return ConversationHandler.END

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–ù–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞.")
    return await start(query, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=base_keyboard())
    return ConversationHandler.END

async def main():
    token = os.environ["BOT_TOKEN"]
    app = Application.builder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_contact)],
            ASK_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_about)],
            ASK_ABOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_and_thank)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.Regex("üîÅ –í –Ω–∞—á–∞–ª–æ"), start))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.ALL & filters.UpdateType.CALLBACK_QUERY, restart))

    await app.bot.delete_webhook(drop_pending_updates=True)
    await app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8443)),
        webhook_url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/"
    )

nest_asyncio.apply()
if __name__ == "__main__":
    asyncio.run(main())
