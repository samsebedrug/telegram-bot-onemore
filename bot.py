import os
import logging
import nest_asyncio
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# Enable logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Google Sheets setup
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open("One More Bot").sheet1

# States
CHOOSE_ROLE, ASK_NAME, ASK_CONTACT, ASK_INFO = range(4)

# Inline buttons
inline_buttons = InlineKeyboardMarkup([
    [InlineKeyboardButton("üîÅ –í –Ω–∞—á–∞–ª–æ", callback_data="restart")],
    [InlineKeyboardButton("üåê –ù–∞ —Å–∞–π—Ç", url="https://onemorepro.com")]
])

# Start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ö–ª–∏–µ–Ω—Ç", "–°–æ–∏—Å–∫–∞—Ç–µ–ª—å"]]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ One More Production!\n"
        "–ú—ã —Å–æ–∑–¥–∞—ë–º —Ä–µ–∫–ª–∞–º—É, –∫–ª–∏–ø—ã, –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∫–∏–Ω–æ –∏ digital-–∫–æ–Ω—Ç–µ–Ω—Ç.\n\n"
        "–° –Ω–∞–º–∏ –ø—Ä–æ—Å—Ç–æ. –ò —Ç–æ—á–Ω–æ –∑–∞—Ö–æ—á–µ—Ç—Å—è one more.\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç):",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return CHOOSE_ROLE

# Role selection
async def choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    role = update.message.text.strip()
    context.user_data["role"] = role
    await update.message.reply_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=inline_buttons)
    return ASK_NAME

# Ask for contact
async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text.strip()
    await update.message.reply_text("–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?", reply_markup=inline_buttons)
    return ASK_CONTACT

# Ask for info or send choices
async def ask_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact"] = update.message.text.strip()
    role = context.user_data["role"].lower()

    if role == "–∫–ª–∏–µ–Ω—Ç":
        keyboard = [["–•–æ—á—É —Ä–µ–∫–ª–∞–º—É"], ["–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø—Ä–æ–¥–∞–∫—à–Ω"], ["–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"]]
        await update.message.reply_text("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True))
        return ASK_INFO
    else:
        await update.message.reply_text("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ.", reply_markup=inline_buttons)
        return ASK_INFO

# Final step
async def save_and_thank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["info"] = update.message.text.strip()
    data = [
        context.user_data.get("role", ""),
        context.user_data.get("name", ""),
        context.user_data.get("contact", ""),
        context.user_data.get("info", "")
    ]
    sheet.append_row(data)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.", reply_markup=inline_buttons)
    return ConversationHandler.END

# Restart handler
async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.delete()
        await start(update.callback_query, context)
    return CHOOSE_ROLE

# Cancel handler
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# Main
async def main():
    token = os.environ.get("BOT_TOKEN")
    logger.info("BOT_TOKEN detected: %s", token[:10] + "...")

    app = Application.builder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSE_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_role)],
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_contact)],
            ASK_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_and_thank)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(restart, pattern="^restart$"))

    await app.bot.delete_webhook(drop_pending_updates=True)

    await app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8443)),
        webhook_url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}"
    )

nest_asyncio.apply()
if __name__ == "__main__":
    asyncio.run(main())
