import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, Bot
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π Webhook ‚Äî —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–π —à–∞–≥!
Bot("7543889103:AAG9rP-jt7lfcCGZ5hZwJvFwHx9n65XtkVU").delete_webhook(drop_pending_updates=True)

# –ü–æ—Ç–æ–º —Å–æ–∑–¥–∞—ë—Ç—Å—è Application:
app = ApplicationBuilder().token("7543889103:AAG9rP-jt7lfcCGZ5hZwJvFwHx9n65XtkVU").build()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
ROLE, NAME, CONTACT, VIDEO_TYPE, PORTFOLIO, CUSTOM_QUESTION = range(6)

# –ü–µ—Ä–µ–≤–æ–¥—ã
translations = {
    "ru": {
        "start": """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ One More Production!
–ú—ã —Å–æ–∑–¥–∞—ë–º —Ä–µ–∫–ª–∞–º—É, –∫–ª–∏–ø—ã, –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∫–∏–Ω–æ –∏ –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–π digital-–∫–æ–Ω—Ç–µ–Ω—Ç.

–° –Ω–∞–º–∏ –ø—Ä–æ—Å—Ç–æ. –ò —Ç–æ—á–Ω–æ –∑–∞—Ö–æ—á–µ—Ç—Å—è one more.

üëá –í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç):""",
        "ask_name": "–ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
        "ask_contact": "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ @username.",
        "ask_type": "–ö–∞–∫–æ–π —Ç–∏–ø –≤–∏–¥–µ–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        "ask_portfolio": "–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏–ª–∏ —Ä–µ–∑—é–º–µ.",
        "thank_client": "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ üôå",
        "thank_candidate": "–°–ø–∞—Å–∏–±–æ! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ–º—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.",
        "cancelled": "–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        "restart": "üîÅ –í –Ω–∞—á–∞–ª–æ",
        "website_info": "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç:",
        "you_selected": "–í—ã –≤—ã–±—Ä–∞–ª–∏: {}"
    }
}

def t(key, lang):
    return translations[lang].get(key, key)

def control_buttons(lang):
    return [[t("restart", lang), "üîó –°–∞–π—Ç"]]

def connect_to_sheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/spreadsheets",
             "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
    client = gspread.authorize(creds)
    sheet = client.open("one-more-production-bot").worksheet("–ó–∞—è–≤–∫–∏")
    return sheet

def save_to_sheet(name, contact, role, extra):
    sheet = connect_to_sheet()
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    sheet.append_row([now, name, contact, role, extra])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    lang = context.user_data['lang'] = 'ru'
    context.user_data['history'] = []
    role_keyboard = [["–ö–ª–∏–µ–Ω—Ç", "–°–æ–∏—Å–∫–∞—Ç–µ–ª—å"], control_buttons(lang)[0]]
    await update.message.reply_text(t("start", lang),
        reply_markup=ReplyKeyboardMarkup(role_keyboard, resize_keyboard=True))
    return ROLE

async def website_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    await update.message.reply_text(
        f"{t('website_info', lang)} https://onemorepro.com",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏", url="https://onemorepro.com")]
        ])
    )
    return None

def is_control_command(text, lang):
    return text in [t("restart", lang), "üîó –°–∞–π—Ç"]

async def handle_control(update, context, current_state):
    lang = context.user_data.get("lang", "ru")
    text = update.message.text
    if text == t("restart", lang):
        return await start(update, context)
    elif "—Å–∞–π—Ç" in text.lower():
        await website_handler(update, context)
        return current_state
    return None

async def get_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = await handle_control(update, context, ROLE)
    if state is not None:
        return state
    context.user_data['role'] = update.message.text
    context.user_data['history'].append(ROLE)
    lang = context.user_data['lang']
    await update.message.reply_text(t("ask_name", lang), reply_markup=ReplyKeyboardMarkup(control_buttons(lang), resize_keyboard=True))
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = await handle_control(update, context, NAME)
    if state is not None:
        return state
    context.user_data['name'] = update.message.text
    context.user_data['history'].append(NAME)
    lang = context.user_data['lang']
    await update.message.reply_text(t("ask_contact", lang), reply_markup=ReplyKeyboardMarkup(control_buttons(lang), resize_keyboard=True))
    return CONTACT

async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = await handle_control(update, context, CONTACT)
    if state is not None:
        return state
    context.user_data['contact'] = update.message.text
    context.user_data['history'].append(CONTACT)
    lang = context.user_data['lang']
    role = context.user_data['role'].lower()

    if "–∫–ª–∏" in role:
        keyboard = [["–†–µ–∫–ª–∞–º–∞", "–ö–ª–∏–ø"], ["–ò–Ω—Ç–µ—Ä–≤—å—é", "–î—Ä—É–≥–æ–µ"], control_buttons(lang)[0]]
        await update.message.reply_text(t("ask_type", lang), reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return VIDEO_TYPE
    elif "—Å–æ–∏—Å–∫–∞—Ç–µ–ª—å" in role:
        await update.message.reply_text(t("ask_portfolio", lang), reply_markup=ReplyKeyboardMarkup(control_buttons(lang), resize_keyboard=True))
        return PORTFOLIO
    else:
        await update.message.reply_text("–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardMarkup(control_buttons(lang), resize_keyboard=True))
        return CUSTOM_QUESTION

async def get_video_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = await handle_control(update, context, VIDEO_TYPE)
    if state is not None:
        return state
    context.user_data['video_type'] = update.message.text
    context.user_data['history'].append(VIDEO_TYPE)
    return await finish_conversation(update, context)

async def get_portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = await handle_control(update, context, PORTFOLIO)
    if state is not None:
        return state
    context.user_data['portfolio'] = update.message.text
    context.user_data['history'].append(PORTFOLIO)
    return await finish_conversation(update, context)

async def get_custom_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = await handle_control(update, context, CUSTOM_QUESTION)
    if state is not None:
        return state
    context.user_data['custom_question'] = update.message.text
    context.user_data['history'].append(CUSTOM_QUESTION)
    return await finish_conversation(update, context)

async def finish_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    lang = data['lang']
    name = data['name']
    contact = data['contact']
    role = data['role']

    try:
        if "–∫–ª–∏" in role.lower():
            extra = data.get('video_type', '')
            save_to_sheet(name, contact, "–ö–ª–∏–µ–Ω—Ç", extra)
            await update.message.reply_text(t("thank_client", lang), reply_markup=ReplyKeyboardMarkup(control_buttons(lang), resize_keyboard=True))
        elif "—Å–æ–∏—Å–∫–∞—Ç–µ–ª—å" in role.lower():
            extra = data.get('portfolio', '')
            save_to_sheet(name, contact, "–°–æ–∏—Å–∫–∞—Ç–µ–ª—å", extra)
            await update.message.reply_text(t("thank_candidate", lang), reply_markup=ReplyKeyboardMarkup(control_buttons(lang), resize_keyboard=True))
        else:
            extra = data.get('custom_question', '')
            save_to_sheet(name, contact, role, extra)
            await update.message.reply_text(t("thank_candidate", lang), reply_markup=ReplyKeyboardMarkup(control_buttons(lang), resize_keyboard=True))
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Google –¢–∞–±–ª–∏—Ü—ã: {e}", reply_markup=ReplyKeyboardMarkup(control_buttons(lang), resize_keyboard=True))

    return ROLE

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get("lang", "ru")
    await update.message.reply_text(t("cancelled", lang), reply_markup=ReplyKeyboardMarkup(control_buttons(lang), resize_keyboard=True))
    return ROLE

state_handlers = {
    ROLE: get_role,
    NAME: get_name,
    CONTACT: get_contact,
    VIDEO_TYPE: get_video_type,
    PORTFOLIO: get_portfolio,
    CUSTOM_QUESTION: get_custom_question
}

app = ApplicationBuilder().token("7543889103:AAG9rP-jt7lfcCGZ5hZwJvFwHx9n65XtkVU").build()

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_role)],
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact)],
        VIDEO_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_video_type)],
        PORTFOLIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_portfolio)],
        CUSTOM_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_custom_question)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True
)

app.add_handler(conv_handler)
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
