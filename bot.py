import os
import logging
import asyncio
import nest_asyncio
from aiohttp import web

from telegram import (
    Update,
    ReplyKeyboardRemove,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(credentials)
sheet = client.open("One More Bot").sheet1

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    GREETING,
    CHOOSE_ROLE,
    GET_NAME,
    GET_CONTACT,
    GET_POSITION,
    GET_DETAILS
) = range(6)

# –ö–Ω–æ–ø–∫–∏

def base_keyboard():
    return ReplyKeyboardMarkup(
        [[KeyboardButton("/cancel"), KeyboardButton("/start")]], resize_keyboard=True
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    image_url = "https://onemorepro.com/images/4.jpg"
    consent_text = (
        "–ü—Ä–∏–≤–µ—Ç!\n\n"
        "–ú—ã –∏–≥—Ä–∞–µ–º –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º, –ø–æ—ç—Ç–æ–º—É –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –≤–∞—Å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ —Å –Ω–∞—à–µ–π <a href=\"https://onemorepro.com/docs/privacy.pdf\">–ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a> "
        "–∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ /agree —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
    )
    if update.message:
        await update.message.reply_photo(image_url, caption=None)
        await update.message.reply_html(consent_text, reply_markup=base_keyboard())
    return GREETING

async def greeting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text != "/agree":
        return GREETING

    keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("–ö–ª–∏–µ–Ω—Ç")], [KeyboardButton("–°–æ–∏—Å–∫–∞—Ç–µ–ª—å")], [KeyboardButton("–î—Ä—É–≥–æ–µ")], [KeyboardButton("/cancel"), KeyboardButton("/start")]],
        resize_keyboard=True
    )
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ One More Production!\n\n"
        "–ú—ã —Å–æ–∑–¥–∞—ë–º —Ä–µ–∫–ª–∞–º—É, –∫–ª–∏–ø—ã, –¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∫–∏–Ω–æ –∏ digital-–∫–æ–Ω—Ç–µ–Ω—Ç.\n"
        "–° –Ω–∞–º–∏ –ø—Ä–æ—Å—Ç–æ –∏ —Ç–æ—á–Ω–æ –∑–∞—Ö–æ—á–µ—Ç—Å—è one more.\n\n"
        "üîª –í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:"
    )
    await update.message.reply_text(welcome_text, reply_markup=keyboard)
    return CHOOSE_ROLE

async def choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    raw_role = update.message.text.lower()
    if raw_role == "/cancel":
        return await cancel(update, context)
    role_map = {"–∫–ª–∏–µ–Ω—Ç": "client", "—Å–æ–∏—Å–∫–∞—Ç–µ–ª—å": "applicant", "–¥—Ä—É–≥–æ–µ": "other"}
    role_key = role_map.get(raw_role)
    if not role_key:
        return CHOOSE_ROLE
    context.user_data["role"] = role_key
    context.user_data["row"] = [raw_role, "", "", "", ""]
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ", reply_markup=base_keyboard())
    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text
    if name == "/cancel":
        return await cancel(update, context)
    context.user_data["name"] = name
    context.user_data["row"][1] = name
    await update.message.reply_text("–û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω, email –∏–ª–∏ –Ω–∏–∫ –≤ Telegram).", reply_markup=base_keyboard())
    return GET_CONTACT

async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    contact = update.message.text
    if contact == "/cancel":
        return await cancel(update, context)
    context.user_data["contact"] = contact
    context.user_data["row"][2] = contact
    role = context.user_data["role"]
    if role in ["applicant", "other"]:
        await update.message.reply_text("–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ä–æ–ª—å –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ?", reply_markup=base_keyboard())
    elif role == "client":
        await update.message.reply_text("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=base_keyboard())
    else:
        return GET_DETAILS
    return GET_POSITION

async def get_position(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    position = update.message.text
    if position == "/cancel":
        return await cancel(update, context)
    context.user_data["position"] = position
    context.user_data["row"][3] = position
    await update.message.reply_text("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ:", reply_markup=base_keyboard())
    return GET_DETAILS

async def get_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    details = update.message.text
    context.user_data["details"] = details
    context.user_data["row"][4] = details
    sheet.append_row(context.user_data["row"])
    await update.message.reply_photo(
        "https://onemorepro.com/images/6.jpg",
        caption="–°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.",
        reply_markup=base_keyboard()
    )
    return ConversationHandler.END

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    return await start(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_photo(
        "https://onemorepro.com/images/14.jpg",
        caption="–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.",
        reply_markup=base_keyboard()
    )
    return ConversationHandler.END

async def healthz(request):
    return web.Response(text="ok")

async def webhook_handler(request):
    update = await request.json()
    await request.app["application"].process_update(Update.de_json(update, request.app["application"].bot))
    return web.Response()

async def main():
    app = Application.builder().token(os.environ["BOT_TOKEN"]).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GREETING: [MessageHandler(filters.TEXT & ~filters.COMMAND, greeting)],
            CHOOSE_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_role)],
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact)],
            GET_POSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_position)],
            GET_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_details)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CommandHandler("start", restart)
        ],
        per_chat=True,
        per_message=False,
    )

    app.add_handler(conv_handler)

    await app.initialize()
    await app.bot.delete_webhook(drop_pending_updates=True)
    await app.bot.set_webhook(url=f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/webhook")

    web_app = web.Application()
    web_app["application"] = app
    web_app.add_routes([
        web.post("/webhook", webhook_handler),
        web.get("/healthz", healthz),
    ])

    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.environ.get("PORT", 8443)))
    await site.start()

    await app.start()
    logger.info("Bot is running...")
    await asyncio.Event().wait()  # run forever

nest_asyncio.apply()

if __name__ == "__main__":
    asyncio.run(main())
